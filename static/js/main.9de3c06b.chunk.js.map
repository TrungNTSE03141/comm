{"version":3,"sources":["components/Bootstrap/index.js","components/MessageBoard/index.js","services/TextChatService.js","components/MessageMaker/index.js","components/ParticipantsList/index.js","screens/Login/index.js","services/VideoCallService.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","style","content","Textbox","placeholder","value","defaultValue","onChange","onKeyUp","rows","id","MessageBoard","scrollToBottom","_this","messagesEnd","scrollIntoView","behavior","this","_this2","height","width","overflowY","overflowX","marginTop","marginLeft","messages","map","message","index","key","friend","marginBottom","src","alt","float","clear","ref","el","React","Component","END_POINT","socketClient","socketIOClient","TextChatService","Object","classCallCheck","username","remoteID","emit","CONFIGURATIONS","EMIT_TYPES","REGISTER","responseCallback","on","response","TEXT_MESSAGE","callback_func","callbackFunc","NEW_MEMBER_JOIN","userInfo","MessageMaker","possibleConstructorReturn","getPrototypeOf","call","messageClear","setState","typingHandler","event","which","messageSender","state","trim","length","send","onSentMessage","handleChange","target","paddingLeft","paddingRight","border","backgroundColor","ParticipantsList","mock_participants","memberJoinListener","console","log","concat","_this3","participant","onClick","onVideoCall","title","Login","onTypingHandler","register","onResponse","onLoginResponse","registerResponse","type","maxLength","PeerKey","services_VideoCallService","VideoCallService","peerInstance","openStream","navigator","mediaDevices","getUserMedia","audio","video","playVideoStream","videlHtmlElement","stream","srcObject","play","openConnect","ReceiveCallListener","myVideoHtmlElement","theirVideoHtmlElement","then","answer","remoteStream","Call","remoteId","Peer","App","messageReceived","onShowMessage","code","isLoggedIn","document","getElementById","alert","splice","TextMessageService","receive","backgroundImage","controls","paddingTop","components_MessageBoard","components_MessageMaker","components_ParticipantsList","screens_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9de3c06b.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './styles.local.scss';\n\nexport function Message(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"message\" style={props.style}>\n                {props.content}\n            </div>\n        </div>\n    )\n}\n\nexport function Image(props) {\n    return (\n        <img src={props.src} className=\"img-rounded\" alt={props.alt} width={props.width} height={props.height} />\n    )\n}\n\nexport function Dropdown(props) {\n    return (\n        <div className=\"dropdown\">\n            <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{props.label}<span className=\"caret\"></span></button>\n            <ul className=\"dropdown-menu\">\n                {\n                    props.options.map((option, index) => {\n                        return (\n                            <li key={index}><a href={option.value}>{option.display}</a></li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport function Textbox(props) {\n    return (\n        <textarea placeholder={\"Type a message here\"} value={props.defaultValue} onChange={props.onChange} onKeyUp={props.onKeyUp} className=\"form-control\" rows=\"3\" id={props.id} style={props.style}></textarea>\n    )\n}","\nimport React from 'react';\nimport './styles.local.scss';\nimport { Message } from '../Bootstrap';\n\n//import VideoCallService from '../../services/VideoCallService';\n\nclass MessageBoard extends React.Component {\n\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n\n        // navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n        //     .then(stream => {\n        //         const video = document.getElementById(\"localStream\");\n\n        //         video.srcObject = stream;\n\n        //         video.onloadedmetadata = function(){\n        //             video.play();\n        //         }\n        //     })\n        //     .catch(error => {\n        //         console.log(error);\n        //     })\n\n        // VideoCallService.openConnect(function(myRemoteId){\n        //     console.log(myRemoteId);\n        //     alert(myRemoteId);\n        // });\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    render() {\n        return (\n            <div style={{ height: 'calc(100vh - 250px)', width: '102%', overflowY: 'auto', overflowX: 'hidden', marginTop: 10, marginLeft: -15 }}>\n                {\n                    this.props.messages.map((message, index) => {\n                        return (\n                            <div key={index} className=\"row\">\n                                <div className=\"col-sm-1\">\n                                    {\n                                        message.friend ? <img width={50} height={50} style={{ marginBottom: 10 }} src={\"https://www.w3schools.com/bootstrap4/paris.jpg\"} className=\"rounded-circle\" alt=\"AV\" /> : null\n                                    }\n                                </div>\n                                <div className=\"col-sm-11\">\n                                    {\n                                        message.friend ? <Message content={message.content} /> : <Message content={message.content} style={{ float: 'right' }} />\n                                    }\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n\n                <div style={{ float: \"left\", clear: \"both\" }}\n                    ref={(el) => { this.messagesEnd = el; }}>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MessageBoard","import socketIOClient from 'socket.io-client';\n\n//const END_POINT = \"http://ec2-18-136-198-209.ap-southeast-1.compute.amazonaws.com:4002\"\nconst END_POINT = \"http://192.168.0.102:4002\"\nlet socketClient = socketIOClient(END_POINT);\n\nexport default class TextChatService {\n\n    constructor(){\n        if(!socketClient){\n            socketClient = socketIOClient(END_POINT);\n        }\n    }\n\n    static register(username, remoteID){\n        socketClient.emit(CONFIGURATIONS.EMIT_TYPES.REGISTER, username, remoteID);\n    }\n\n    static registerResponse(responseCallback){\n        socketClient.on(CONFIGURATIONS.EMIT_TYPES.REGISTER, (response) => {\n            responseCallback(response);\n        })\n    }\n\n    static send(message){\n        socketClient.emit(CONFIGURATIONS.EMIT_TYPES.TEXT_MESSAGE, message);\n    }\n\n    static receive(callback_func){\n        socketClient.on(CONFIGURATIONS.EMIT_TYPES.TEXT_MESSAGE, (message) => {\n            callback_func(message);\n        })\n    }\n\n    static memberJoinListener(callbackFunc){\n        socketClient.on(CONFIGURATIONS.EMIT_TYPES.NEW_MEMBER_JOIN, (userInfo) => {\n            callbackFunc(userInfo);\n        })\n    }\n}\n\nconst CONFIGURATIONS = {\n    EMIT_TYPES: {\n        REGISTER: 'Register',\n        TEXT_MESSAGE: 'Text Message',\n        NEW_MEMBER_JOIN: 'New Member Join',\n    }\n}","\nimport React from 'react';\nimport './styles.local.scss';\nimport { Textbox } from '../Bootstrap';\n\nimport TextChatService from '../../services/TextChatService';\n\n\nclass MessageMaker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: ''\n        }\n    }\n\n    messageClear = () => {\n        this.setState({ message: '' });\n    }\n\n    typingHandler = (event) => {\n        if (event.which === 13) {\n            this.messageSender();\n        } else {\n            //TODO\n\n        }\n    }\n\n    messageSender = () => {\n        //TODO\n        //Sending message onto server\n        if (this.state.message.trim().length > 0) {\n            TextChatService.send(this.state.message);\n            this.props.onSentMessage(this.state.message);\n            this.messageClear();\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ message: event.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"row\" style={{ paddingLeft: 10, paddingRight: 10 }}>\n                <Textbox style={{ border: 'none', backgroundColor: '#F5FAFC' }} defaultValue={this.state.message} onChange={this.handleChange} onKeyUp={this.typingHandler} />\n\n                {/* <div className=\"col-sm-1\">\n                    <img width={45} height={45} src={\"https://png.pngtree.com/svg/20170629/send_notification_334641.png\"} />\n                </div> */}\n            </div>\n        )\n    }\n}\n\nexport default MessageMaker","import React from 'react';\nimport './styles.local.scss';\n\nimport TextChatService from '../../services/TextChatService';\n\n\nclass ParticipantsList extends React.Component {\n    \n    constructor(props){\n        super(props);\n\n        this.state = {\n            mock_participants: [\n                // {\n                //     username: 'Giang Nguyen',\n                //     remoteID: 'ajjhasdjjasd0000'\n                // }\n            ]\n        }\n    }\n\n    componentDidMount(){\n        TextChatService.memberJoinListener((userInfo) => {\n            console.log(userInfo);\n\n            this.setState({mock_participants: [userInfo].concat(this.state.mock_participants)});\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"participant_list_container\">\n                {\n                    this.state.mock_participants.map((participant, index) => {\n                        return (\n                            <div className=\"wrapper\" key={index} onClick={() => {this.props.onVideoCall(participant.remoteID)}}>\n                                <div className=\"block\">\n                                    <img width={45} height={45} src={\"https://www.w3schools.com/bootstrap4/paris.jpg\"} className=\"rounded-circle\" alt={participant.username} />\n                                    <span className=\"label\" title={participant.username}>{participant.username}</span>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default ParticipantsList","\nimport React from 'react';\nimport './styles.local.scss';\n\nimport TextChatService from '../../services/TextChatService';\n\nclass Login extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            username: ''\n        }\n    }\n\n    componentDidMount(){\n        TextChatService.registerResponse(this.onResponse);\n    }\n\n    onTypingHandler = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    onKeyUp = (event) => {\n        if(event.which === 13 && this.state.username.trim().length > 0){\n            TextChatService.register(this.state.username, this.props.remoteID);\n        }\n    }\n\n    onResponse = (response) => {\n        this.props.onLoginResponse(response)\n    }\n\n    render() {\n        return (\n            <div style={{ height: '100vh', width: '100vw', backgroundColor: 'black' }}>\n                <div className=\"form\">\n                    <h3 className=\"title\">What's your nickname?</h3>\n                    <input onChange={this.onTypingHandler} onKeyUp={this.onKeyUp} className=\"usernameInput\" type=\"text\" maxLength=\"14\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login","import Peer from 'peerjs';\n\nconst PeerKey = 'lwjd5qra8257b9';\n\nclass VideoCallService {\n\n    peerInstance = null;\n\n    constructor() {\n        if (!this.peerInstance) {\n            this.peerInstance = new Peer({ key: PeerKey })\n        }\n    }\n\n    get PeerInstance() {\n        if (!this.peerInstance) {\n            this.peerInstance = new Peer({ key: PeerKey })\n        }\n\n        return this.peerInstance;\n    }\n\n    openStream = () => {\n        const config = { audio: false, video: true };\n        return navigator.mediaDevices.getUserMedia(config);\n    }\n\n    playVideoStream = (videlHtmlElement, stream) => {\n        videlHtmlElement.srcObject = stream;\n        videlHtmlElement.play();\n    }\n\n    //Open a connection\n    openConnect = (callbackFunc) => {\n        this.peerInstance.on('open', callbackFunc);\n    }\n\n    //Receiving a call\n    ReceiveCallListener = (myVideoHtmlElement, theirVideoHtmlElement) => {\n        this.peerInstance.on('call', call => {\n            this.openStream().then(stream => {\n                call.answer(stream);\n\n                this.playVideoStream(myVideoHtmlElement, stream);\n\n                call.on('stream', remoteStream => this.playVideoStream(theirVideoHtmlElement, remoteStream));\n            })\n        })\n    }\n\n    //Calling\n    Call = (remoteId, myVideoHtmlElement, theirVideoHtmlElement) => {\n        this.openStream().then(stream => {\n            this.playVideoStream(myVideoHtmlElement, stream);\n\n            const call = this.peerInstance.call(remoteId, stream);\n\n            call.on('stream', remoteStream => this.playVideoStream(theirVideoHtmlElement, remoteStream));\n        })\n    }\n\n}\n\nexport default new VideoCallService();","import React, { Component } from 'react';\nimport MessageBoard from './components/MessageBoard';\nimport MessageMaker from './components/MessageMaker';\nimport ParticipantsList from './components/ParticipantsList';\n\nimport Login from '../src/screens/Login';\n\nimport TextMessageService from './services/TextChatService';\nimport VideoCallService from './services/VideoCallService';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messages: [\n\n      ],\n      isLoggedIn: false,\n      username: '',\n      remoteID: ''\n    }\n  }\n\n  componentDidMount() {\n    TextMessageService.receive(this.messageReceived);\n\n    //\n    VideoCallService.openConnect((remoteID) =>  {\n      console.log(remoteID);\n      this.setState({remoteID});\n    });\n  }\n\n  messageReceived = (message) => {\n    this.onShowMessage(message)\n  }\n\n  onSentMessage = (message) => {\n    this.onShowMessage(message);\n  }\n\n  onLoginResponse = (response) => {\n    if (response.code === 1) {\n      this.setState({\n        isLoggedIn: true,\n        username: response.username\n      });\n\n      VideoCallService.ReceiveCallListener(document.getElementById('localStream'), document.getElementById('remoteStream'));\n    } else {\n      alert(response.message);\n    }\n  }\n\n  onShowMessage = (message) => {\n    let messages = this.state.messages;\n\n    if (message.username) {\n      messages = messages.splice(messages.length, 0, {\n        content: message.message,\n        friend: message.username !== this.state.username,\n        username: message.username\n      });\n    } else {\n      messages = messages.splice(messages.length, 0, {\n        content: message,\n        friend: false,\n        username: this.state.username\n      });\n    }\n\n    this.setState({ message: messages });\n  }\n\n  onVideoCall = (remoteID) => {\n    VideoCallService.Call(remoteID, document.getElementById('localStream'), document.getElementById('remoteStream'));\n  }\n\n\n  render() {\n    if (this.state.isLoggedIn) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\" style={{ height: 100, backgroundImage: 'linear-gradient(to bottom right, red, yellow)'}}>\n            \n          </header>\n\n          <div className=\"row border-top\">\n\n            {/* stream video area START */}\n            <div className=\"col-sm-3 border-right\" style={{backgroundColor: '#F5FAFC'}}>\n              <video id=\"localStream\" width=\"95%\" controls style={{ paddingLeft: 20, paddingTop: 20 }}></video>\n              <video id=\"remoteStream\" width=\"95%\" controls style={{ paddingLeft: 20, paddingTop: 20 }}></video>\n            </div>\n            {/* stream video area END */}\n\n            {/* Text message area START */}\n            <div className=\"col-sm-6\" style={{backgroundColor: '#F5FAFC'}}>\n              <MessageBoard messages={this.state.messages} />\n              <hr />\n              <MessageMaker onSentMessage={this.onSentMessage} />\n            </div>\n            {/* Text message area END */}\n\n            {/* Participants list area START */}\n            <div className=\"col-sm-3 border-left\">\n              <ParticipantsList onVideoCall={this.onVideoCall} />\n            </div>\n            {/* Participants list area END */}\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\" style={{ backgroundColor: 'black' }}>\n          <Login remoteID={this.state.remoteID} onLoginResponse={this.onLoginResponse} />\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}