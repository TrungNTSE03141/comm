{"version":3,"sources":["Components/Bootstrap/index.js","Components/MessageBoard/index.js","Services/Implements/TextMessageServices.js","Components/MessageSender/index.js","Components/ParticipantsList/index.js","Components/Search/index.js","Screens/Login/index.js","Services/Implements/VideoCallServices.js","Application/App.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","style","content","Textbox","placeholder","value","defaultValue","onChange","onKeyUp","rows","id","MessageBoard","scrollToBottom","_this","messagesEnd","scrollIntoView","behavior","this","_this2","messages","map","message","index","key","friend","width","height","marginBottom","src","alt","float","clear","ref","el","React","Component","END_POINT","TextMessageServices","Object","classCallCheck","socketClient","socketIOClient","username","remoteID","emit","CONFIGURATIONS","EMIT_TYPES","REGISTER","responseCallback","on","response","TEXT_MESSAGE","callback_func","callbackFunc","UPDATE_AVAILABLE_USERS","availableUsers","Implements_TextMessageServices","messageSender","possibleConstructorReturn","getPrototypeOf","call","messageClear","setState","typingHandler","event","which","state","trim","length","send","onSentMessage","handleChange","target","border","backgroundColor","ParticipantsList","mock_participants","ReceiveAvailableUsers","console","log","_this3","participant","onClick","onVideoCall","title","Search","Login","onTypingHandler","register","onResponse","onLoginResponse","registerResponse","type","maxLength","PeerKey","VideoCallServices","openStream","navigator","mediaDevices","getUserMedia","audio","video","playVideoStream","videlHtmlElement","stream","srcObject","play","openConnect","peerInstance","ReceiveCallListener","myVideoHtmlElement","theirVideoHtmlElement","then","answer","remoteStream","Call","remoteId","Peer","Implements_VideoCallServices","App","messageReceived","onShowMessage","code","isLoggedIn","document","getElementById","alert","splice","receive","backgroundImage","borderRadius","controls","paddingLeft","paddingTop","Components_MessageBoard","MessageSender","Components_Search","Components_ParticipantsList","Screens_Login","Boolean","window","location","hostname","match","ReactDOM","render","Application_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4180eb1d.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './styles.local.scss';\n\nexport function Message(props) {\n    return (\n        <div className=\"bootstrap_customize_container\">\n            <div className=\"bootstrap_customize_message\" style={props.style}>\n                {props.content}\n            </div>\n        </div>\n    )\n}\n\nexport function Image(props) {\n    return (\n        <img alt={props.alt} className=\"img-rounded\" {...props} />\n    )\n}\n\nexport function Dropdown(props) {\n    return (\n        <div className=\"dropdown\">\n            <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{props.label}<span className=\"caret\"></span></button>\n            <ul className=\"dropdown-menu\">\n                {\n                    props.options.map((option, index) => {\n                        return (\n                            <li key={index}><a href={option.value}>{option.display}</a></li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport function Textbox(props) {\n    return (\n        <textarea placeholder={\"Type a message here\"} value={props.defaultValue} onChange={props.onChange} onKeyUp={props.onKeyUp} className=\"form-control\" rows=\"3\" id={props.id} style={props.style}></textarea>\n    )\n}","\nimport React from 'react';\nimport './styles.local.scss';\nimport { Message } from '../Bootstrap';\n\nclass MessageBoard extends React.Component {\n\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    render() {\n        return (\n            <div className=\"message_board_container\">\n                {\n                    this.props.messages.map((message, index) => {\n                        return (\n                            <div key={index} className=\"row\">\n                                <div className=\"col-sm-1\">\n                                    {\n                                        message.friend ? <img width={50} height={50} style={{ marginBottom: 10 }} src={\"https://www.w3schools.com/bootstrap4/paris.jpg\"} className=\"rounded-circle\" alt=\"AV\" /> : null\n                                    }\n                                </div>\n                                <div className=\"col-sm-11\">\n                                    {\n                                        message.friend ? <Message content={message.content} /> : <Message content={message.content} style={{ float: 'right' }} />\n                                    }\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n\n                <div style={{ float: \"left\", clear: \"both\" }}\n                    ref={(el) => { this.messagesEnd = el; }}>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MessageBoard","\n\nimport socketIOClient from 'socket.io-client';\n\n//const END_POINT = \"http://localhost:4002\"\nconst END_POINT = \"https://ec2-18-136-198-209.ap-southeast-1.compute.amazonaws.com:4002\"\n\n\nclass TextMessageServices {\n    \n    static socketClient = null;\n\n    constructor(){\n        if(!this.socketClient){\n            this.socketClient = socketIOClient(END_POINT);\n        }\n    }\n\n    register(username, remoteID){\n        this.socketClient.emit(CONFIGURATIONS.EMIT_TYPES.REGISTER, username, remoteID);\n    }\n\n    registerResponse(responseCallback){\n        this.socketClient.on(CONFIGURATIONS.EMIT_TYPES.REGISTER, (response) => {\n            responseCallback(response);\n        })\n    }\n\n    send(message){\n        this.socketClient.emit(CONFIGURATIONS.EMIT_TYPES.TEXT_MESSAGE, message);\n    }\n\n    receive(callback_func){\n        this.socketClient.on(CONFIGURATIONS.EMIT_TYPES.TEXT_MESSAGE, (message) => {\n            callback_func(message);\n        })\n    }\n\n    ReceiveAvailableUsers(callbackFunc){\n        this.socketClient.on(CONFIGURATIONS.EMIT_TYPES.UPDATE_AVAILABLE_USERS, (availableUsers) => {\n            callbackFunc(availableUsers);\n        })\n    }\n}\n\nconst CONFIGURATIONS = {\n    EMIT_TYPES: {\n        REGISTER: 'Register',\n        TEXT_MESSAGE: 'Text Message',\n        UPDATE_AVAILABLE_USERS: 'Update Available Users'\n    }\n}\n\nexport default new TextMessageServices()","\nimport React from 'react';\nimport './styles.local.scss';\nimport { Textbox } from '../Bootstrap';\n\nimport TextMessageServices from '../../Services/Implements/TextMessageServices';\n\n\nclass messageSender extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: ''\n        }\n    }\n\n    messageClear = () => {\n        this.setState({ message: '' });\n    }\n\n    typingHandler = (event) => {\n        if (event.which === 13) {\n            this.messageSender();\n        } else {\n            //TODO\n\n        }\n    }\n\n    messageSender = () => {\n        //TODO\n        //Sending message onto server\n        if (this.state.message.trim().length > 0) {\n            TextMessageServices.send(this.state.message);\n            this.props.onSentMessage(this.state.message);\n            this.messageClear();\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ message: event.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"message_maker_container row\">\n                <Textbox style={{ border: 'none', backgroundColor: '#F5FAFC' }} defaultValue={this.state.message} onChange={this.handleChange} onKeyUp={this.typingHandler} />\n\n                {/* <div className=\"col-sm-1\">\n                    <img width={45} height={45} src={\"https://png.pngtree.com/svg/20170629/send_notification_334641.png\"} />\n                </div> */}\n            </div>\n        )\n    }\n}\n\nexport default messageSender","import React from 'react';\nimport './styles.local.scss';\n\nimport TextMessageServices from '../../Services/Implements/TextMessageServices';\n\n\nclass ParticipantsList extends React.Component {\n    \n    constructor(props){\n        super(props);\n\n        this.state = {\n            mock_participants: [\n\n            ]\n        }\n    }\n\n    componentDidMount(){\n    \n        TextMessageServices.ReceiveAvailableUsers((availableUsers) => {\n            console.log(availableUsers);\n            \n            this.setState({mock_participants: availableUsers});\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"participant_list_container\">\n                {\n                    this.state.mock_participants.map((participant, index) => {\n                        return (\n                            <div className=\"wrapper\" key={index} onClick={() => {this.props.onVideoCall(participant.remoteID)}}>\n                                <div className=\"block\">\n                                    <img width={45} height={45} src={\"https://www.w3schools.com/bootstrap4/paris.jpg\"} className=\"rounded-circle\" alt={participant.username} />\n                                    <span className=\"label\" title={participant.username}>{participant.username}</span>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default ParticipantsList","import React from 'react';\nimport './styles.local.scss';\n// const FontAwesome = require('react-fontawesome')\n// const ReactDOM = require('react-dom')\n\nfunction Search(props) {\n    return (\n        <div>\n            \n            <input className=\"search_input border-bottom\" id={props.id} placeholder={props.placeholder} />\n        </div>\n    )\n}\n\nexport default Search","\nimport React from 'react';\nimport './styles.local.scss';\n\nimport TextMessageServices from '../../Services/Implements/TextMessageServices';\n\nclass Login extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            username: ''\n        }\n    }\n\n    componentDidMount(){\n        TextMessageServices.registerResponse(this.onResponse);\n    }\n\n    onTypingHandler = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    onKeyUp = (event) => {\n        if(event.which === 13 && this.state.username.trim().length > 0){\n            TextMessageServices.register(this.state.username, this.props.remoteID);\n        }\n    }\n\n    onResponse = (response) => {\n        this.props.onLoginResponse(response)\n    }\n\n    render() {\n        return (\n            <div style={{ height: '100vh', width: '100vw', backgroundColor: 'black' }}>\n                <div className=\"login_form\">\n                    <h3 className=\"title\">What's your nickname?</h3>\n                    <input onChange={this.onTypingHandler} onKeyUp={this.onKeyUp} className=\"usernameInput\" type=\"text\" maxLength=\"14\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login","import Peer from 'peerjs';\n\nconst PeerKey = 'lwjd5qra8257b9';\n\nclass VideoCallServices {\n\n    static peerInstance = null;\n\n    constructor() {\n        if (!this.peerInstance) {\n            this.peerInstance = new Peer({ key: PeerKey })\n        }\n    }\n\n    get PeerInstance() {\n        if (!this.peerInstance) {\n            this.peerInstance = new Peer({ key: PeerKey })\n        }\n\n        return this.peerInstance;\n    }\n\n    openStream = () => {\n        const config = { audio: true, video: true };\n        return navigator.mediaDevices.getUserMedia(config);\n    }\n\n    playVideoStream = (videlHtmlElement, stream) => {\n        videlHtmlElement.srcObject = stream;\n        videlHtmlElement.play();\n    }\n\n    //Open a connection\n    openConnect = (callbackFunc) => {\n        this.peerInstance.on('open', callbackFunc);\n    }\n\n    //Receiving a call\n    ReceiveCallListener = (myVideoHtmlElement, theirVideoHtmlElement) => {\n        this.peerInstance.on('call', call => {\n            this.openStream().then(stream => {\n                call.answer(stream);\n\n                this.playVideoStream(myVideoHtmlElement, stream);\n\n                call.on('stream', remoteStream => this.playVideoStream(theirVideoHtmlElement, remoteStream));\n            })\n        })\n    }\n\n    //Calling\n    Call = (remoteId, myVideoHtmlElement, theirVideoHtmlElement) => {\n        this.openStream().then(stream => {\n            this.playVideoStream(myVideoHtmlElement, stream);\n\n            const call = this.peerInstance.call(remoteId, stream);\n\n            call.on('stream', remoteStream => this.playVideoStream(theirVideoHtmlElement, remoteStream));\n        })\n    }\n\n}\n\nexport default new VideoCallServices();","import React, { Component } from 'react';\nimport MessageBoard from '../Components/MessageBoard';\nimport MessageSender from '../Components/MessageSender';\nimport ParticipantsList from '../Components/ParticipantsList';\nimport Search from '../Components/Search';\n\nimport Login from '../Screens/Login';\n\nimport TextMessageServices from '../Services/Implements/TextMessageServices';\nimport VideoCallServices from '../Services/Implements/VideoCallServices';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messages: [\n\n      ],\n      isLoggedIn: false,\n      username: '',\n      remoteID: ''\n    }\n  }\n\n  componentDidMount() {\n    TextMessageServices.receive(this.messageReceived);\n\n    //\n    VideoCallServices.openConnect((remoteID) =>  {\n      console.log(remoteID);\n      this.setState({remoteID});\n    });\n  }\n\n  messageReceived = (message) => {\n    this.onShowMessage(message)\n  }\n\n  onSentMessage = (message) => {\n    this.onShowMessage(message);\n  }\n\n  onLoginResponse = (response) => {\n    if (response.code === 1) {\n      this.setState({\n        isLoggedIn: true,\n        username: response.username\n      });\n\n      //Setup listener for receiving the video call\n      VideoCallServices.ReceiveCallListener(document.getElementById('localStream'), document.getElementById('remoteStream'));\n    } else {\n      alert(response.message);\n    }\n  }\n\n  onShowMessage = (message) => {\n    let messages = this.state.messages;\n\n    if (message.username) {\n      messages = messages.splice(messages.length, 0, {\n        content: message.message,\n        friend: message.username !== this.state.username,\n        username: message.username\n      });\n    } else {\n      messages = messages.splice(messages.length, 0, {\n        content: message,\n        friend: false,\n        username: this.state.username\n      });\n    }\n\n    this.setState({ message: messages });\n  }\n\n  onVideoCall = (remoteID) => {\n    VideoCallServices.Call(remoteID, document.getElementById('localStream'), document.getElementById('remoteStream'));\n  }\n\n\n  render() {\n    if (this.state.isLoggedIn) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\" style={{ height: 100, backgroundImage: 'linear-gradient(to bottom right, red, yellow)'}}>\n            \n          </header>\n\n          <div className=\"row border-top\">\n\n            {/* stream video area START */}\n            <div className=\"col-sm-3 border-right\" style={{backgroundColor: '#F5FAFC', borderRadius: 20}}>\n              <video id=\"localStream\" width=\"95%\" controls style={{ paddingLeft: 20, paddingTop: 20 }}></video>\n              <video id=\"remoteStream\" width=\"95%\" controls style={{ paddingLeft: 20, paddingTop: 20 }}></video>\n            </div>\n            {/* stream video area END */}\n\n            {/* Text message area START */}\n            <div className=\"col-sm-6\" style={{backgroundColor: '#F5FAFC', borderRadius: 20}}>\n              <MessageBoard messages={this.state.messages} />\n              <hr />\n              <MessageSender onSentMessage={this.onSentMessage} />\n            </div>\n            {/* Text message area END */}\n\n            {/* Participants list area START */}\n            <div className=\"col-sm-3 border-left\" style={{borderRadius: 20}}>\n              <Search placeholder=\"Search\" />\n              <ParticipantsList onVideoCall={this.onVideoCall} />\n            </div>\n            {/* Participants list area END */}\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\" style={{ backgroundColor: 'black' }}>\n          <Login remoteID={this.state.remoteID} onLoginResponse={this.onLoginResponse} />\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Application/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}