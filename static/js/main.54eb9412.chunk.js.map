{"version":3,"sources":["components/Bootstrap/index.js","components/MessageBoard/index.js","services/TextChatService.js","components/MessageMaker/index.js","screens/Login/index.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","style","content","Textbox","placeholder","value","defaultValue","onChange","onKeyUp","rows","id","MessageBoard","scrollToBottom","_this","messagesEnd","scrollIntoView","behavior","this","_this2","marginTop","borderRight","width","controls","paddingLeft","paddingTop","height","overflow","messages","map","message","index","key","friend","marginBottom","src","alt","float","clear","ref","el","React","Component","END_POINT","socketClient","socketIOClient","TextChatService","Object","classCallCheck","username","emit","CONFIGURATIONS","EMIT_TYPES","REGISTER","responseCallback","on","response","TEXT_MESSAGE","callback_func","MessageMaker","possibleConstructorReturn","getPrototypeOf","call","messageClear","setState","typingHandler","event","which","messageSender","send","state","onSentMessage","handleChange","target","border","Login","onTypingHandler","trim","register","onResponse","onLoginResponse","registerResponse","backgroundColor","type","maxLength","Array","prototype","insert","item","splice","App","messageReceived","length","code","isLoggedIn","TextMessageService","receive","components_MessageBoard","components_MessageMaker","screens_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54eb9412.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './styles.local.scss';\n\nexport function Message(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"message\" style={props.style}>\n                {props.content}\n            </div>\n        </div>\n    )\n}\n\nexport function Image(props) {\n    return (\n        <img src={props.src} className=\"img-rounded\" alt={props.alt} width={props.width} height={props.height} />\n    )\n}\n\nexport function Dropdown(props) {\n    return (\n        <div className=\"dropdown\">\n            <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{props.label}<span className=\"caret\"></span></button>\n            <ul className=\"dropdown-menu\">\n                {\n                    props.options.map((option, index) => {\n                        return (\n                            <li key={index}><a href={option.value}>{option.display}</a></li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport function Textbox(props) {\n    return (\n        <textarea placeholder={\"Type a message here\"} value={props.defaultValue} onChange={props.onChange} onKeyUp={props.onKeyUp} className=\"form-control\" rows=\"3\" id={props.id} style={props.style}></textarea>\n    )\n}","\nimport React from 'react';\nimport './styles.local.scss';\nimport { Message } from '../Bootstrap';\n\nclass MessageBoard extends React.Component {\n\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n\n        // navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n        //     .then(stream => {\n        //         const video = document.getElementById(\"localStream\");\n\n        //         video.srcObject = stream;\n\n        //         video.onloadedmetadata = function(){\n        //             video.play();\n        //         }\n        //     })\n        //     .catch(error => {\n        //         console.log(error);\n        //     })\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    render() {\n        return (\n            <div className=\"row border-top\" style={{ marginTop: 150 }}>\n                <div className=\"col-sm-3 border-right\" style={{ borderRight: 1 }}>\n                    <video id=\"localStream\" width=\"95%\" controls style={{ paddingLeft: 20, paddingTop: 20 }}></video>\n                </div>\n\n                <div className=\"col-sm-6\">\n                    <div style={{ height: 'calc(100vh - 310px)', overflow: 'auto', marginTop: 10 }}>\n                        {\n                            this.props.messages.map((message, index) => {\n                                return (\n                                    <div key={index} className=\"row\">\n                                        <div className=\"col-sm-1\">\n                                            {\n                                                message.friend ? <img width={50} height={50} style={{ marginBottom: 10 }} src={\"https://www.w3schools.com/bootstrap4/paris.jpg\"} className=\"rounded-circle\" alt=\"AV\" /> : null\n                                            }\n                                        </div>\n                                        <div className=\"col-sm-11\">\n                                            {\n                                                message.friend ? <Message content={message.content} /> : <Message content={message.content} style={{ float: 'right' }} />\n                                            }\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n\n                        <div style={{ float: \"left\", clear: \"both\" }}\n                            ref={(el) => { this.messagesEnd = el; }}>\n                        </div>\n                    </div>\n                    <hr />\n                </div>\n\n                <div className=\"col-sm-3 border-left\">\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MessageBoard","import socketIOClient from 'socket.io-client';\n\nconst END_POINT = \"http://ec2-18-136-198-209.ap-southeast-1.compute.amazonaws.com:4002\"\nlet socketClient = socketIOClient(END_POINT);\n\nexport default class TextChatService {\n\n    constructor(){\n        if(!socketClient){\n            socketClient = socketIOClient(END_POINT);\n        }\n    }\n\n    static register(username){\n        socketClient.emit(CONFIGURATIONS.EMIT_TYPES.REGISTER, username);\n    }\n\n    static registerResponse(responseCallback){\n        socketClient.on(CONFIGURATIONS.EMIT_TYPES.REGISTER, (response) => {\n            responseCallback(response);\n        })\n    }\n\n    static send(message){\n        socketClient.emit(CONFIGURATIONS.EMIT_TYPES.TEXT_MESSAGE, message);\n    }\n\n    static receive(callback_func){\n        socketClient.on(CONFIGURATIONS.EMIT_TYPES.TEXT_MESSAGE, (message) => {\n            callback_func(message);\n        })\n    }\n}\n\nconst CONFIGURATIONS = {\n    EMIT_TYPES: {\n        REGISTER: 'Register',\n        TEXT_MESSAGE: 'Text Message'\n    }\n}","\nimport React from 'react';\nimport './styles.local.scss';\nimport { Textbox } from '../Bootstrap';\n\nimport TextChatService from '../../services/TextChatService';\n\n\nclass MessageMaker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: ''\n        }\n    }\n\n    messageClear = () => {\n        this.setState({ message: '' });\n    }\n\n    typingHandler = (event) => {\n        if (event.which === 13) {\n            this.messageSender();\n        } else {\n            //TODO\n\n        }\n    }\n\n    messageSender = () => {\n        //TODO\n        //Sending message onto server\n        TextChatService.send(this.state.message);\n        this.props.onSentMessage(this.state.message);\n        this.messageClear();\n    }\n\n    handleChange = (event) => {\n        this.setState({ message: event.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-sm-3\"></div>\n\n                <div className=\"col-sm-6\">\n                    <Textbox style={{ border: 'none' }} defaultValue={this.state.message} onChange={this.handleChange} onKeyUp={this.typingHandler} />\n                </div>\n                <div className=\"col-sm-1\">\n                    <img width={45} height={45} src={\"https://png.pngtree.com/svg/20170629/send_notification_334641.png\"} />\n                </div>\n\n                <div className=\"col-sm-2\"></div>\n            </div>\n        )\n    }\n}\n\nexport default MessageMaker","\nimport React from 'react';\nimport './styles.local.scss';\n\nimport TextChatService from '../../services/TextChatService';\n\nclass Login extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            username: ''\n        }\n    }\n\n    componentDidMount(){\n        TextChatService.registerResponse(this.onResponse);\n    }\n\n    onTypingHandler = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    onKeyUp = (event) => {\n        if(event.which === 13 && this.state.username.trim() != ''){\n            TextChatService.register(this.state.username);\n        }\n    }\n\n    onResponse = (response) => {\n        this.props.onLoginResponse(response)\n    }\n\n    render() {\n        return (\n            <div style={{ height: '100vh', width: '100vw', backgroundColor: 'black' }}>\n                <div className=\"form\">\n                    <h3 className=\"title\">What's your nickname?</h3>\n                    <input onChange={this.onTypingHandler} onKeyUp={this.onKeyUp} className=\"usernameInput\" type=\"text\" maxLength=\"14\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login","import React, { Component } from 'react';\nimport MessageBoard from './components/MessageBoard';\nimport MessageMaker from './components/MessageMaker';\n\nimport Login from '../src/screens/Login';\n\nimport TextMessageService from './services/TextChatService';\n\n\nArray.prototype.insert = function (index, item) {\n  this.splice(index, 0, item);\n};\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messages: [\n\n      ],\n      isLoggedIn: false\n    }\n  }\n\n  componentDidMount() {\n    TextMessageService.receive(this.messageReceived);\n  }\n\n  messageReceived = (message) => {\n    this.onSentMessage(message.message);\n  }\n\n  onSentMessage = (message) => {\n    let messages = this.state.messages;\n    messages = messages.splice(messages.length, 0, {\n      content: message,\n      friend: false\n    });\n\n    this.setState({ message: messages });\n  }\n\n  onLoginResponse = (response) => {\n    if(response.code === 1){\n      this.setState({isLoggedIn: true});\n    }else{\n\n    }\n  }\n\n\n  render() {\n    if (this.state.isLoggedIn) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\"></header>\n\n          <MessageBoard messages={this.state.messages} />\n\n          <MessageMaker onSentMessage={this.onSentMessage} />\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\" style={{ backgroundColor: 'black' }}>\n          <Login onLoginResponse={this.onLoginResponse} />\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}